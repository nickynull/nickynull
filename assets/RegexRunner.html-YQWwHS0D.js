import{_ as g,f as t,o as b,c as f,a,g as l,h as o,i as x,d as _,e as q}from"./app-Ay5jjEi1.js";const w=a("h1",{id:"正则表达式执行器",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#正则表达式执行器","aria-hidden":"true"},"#"),_(" 正则表达式执行器")],-1),V={class:"line-block"},$={class:"line-block"},R=a("span",null,"正则",-1),N={class:"line-block"},U={class:"inline-block flex1"},X=a("span",null,"替换",-1),M={class:"inline-block"},y=a("label",{for:"clearNotMatch"},"无匹配时输出空字符串",-1),C={class:"line-block"},B=q(`<h2 id="参考表达式" tabindex="-1"><a class="header-anchor" href="#参考表达式" aria-hidden="true">#</a> 参考表达式</h2><blockquote><p>提取路径中 XXX.XXX 形式的文字，替换参数 <code>$1</code></p></blockquote><div class="language-regex line-numbers-mode" data-ext="regex"><pre class="language-regex"><code><span class="token char-set class-name">.</span><span class="token quantifier number">*</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token special-escape escape">\\\\</span>/<span class="token char-class-punctuation punctuation">]</span></span><span class="token group punctuation">(</span><span class="token char-set class-name">.</span><span class="token quantifier number">+</span><span class="token special-escape escape">\\.</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token char-class-negation operator">^</span><span class="token special-escape escape">\\\\</span>/<span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token group punctuation">)</span><span class="token char-set class-name">.</span><span class="token quantifier number">*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>提取所有数值，替换参数 <code>$1</code></p></blockquote><div class="language-regex line-numbers-mode" data-ext="regex"><pre class="language-regex"><code><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token char-class-negation operator">^</span><span class="token char-set class-name">\\d</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">*</span><span class="token group punctuation">(</span><span class="token char-set class-name">\\d</span><span class="token quantifier number">+</span><span class="token group punctuation">(</span><span class="token special-escape escape">\\.</span><span class="token char-set class-name">\\d</span><span class="token quantifier number">+</span><span class="token group punctuation">)</span><span class="token quantifier number">?</span><span class="token group punctuation">)</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token char-class-negation operator">^</span><span class="token char-set class-name">\\d</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>提取第一次出现的数值，替换参数 <code>$1</code></p></blockquote><div class="language-regex line-numbers-mode" data-ext="regex"><pre class="language-regex"><code><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token char-class-negation operator">^</span><span class="token char-set class-name">\\d</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">*</span><span class="token group punctuation">(</span><span class="token char-set class-name">\\d</span><span class="token quantifier number">+</span><span class="token group punctuation">(</span><span class="token special-escape escape">\\.</span><span class="token char-set class-name">\\d</span><span class="token quantifier number">+</span><span class="token group punctuation">)</span><span class="token quantifier number">?</span><span class="token group punctuation">)</span><span class="token char-set class-name">.</span><span class="token quantifier number">*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),E={__name:"RegexRunner.html",setup(P){const p=t(""),i=t(""),r=t(""),d=t(!1),c=t(""),e=t("");function h(){if(!c.value||!p.value){window.$alert("没有可输出的内容，请检查输入/正则表达式");return}let k=c.value.split(`
`);const s=new RegExp(p.value,i.value);let n=k.map(u=>u&&(d.value&&!s.test(u)?"":u.replace(s,r.value)));e.value=n.join(`
`),e.value?window.$alert("运行完毕"):window.$alert("没有可输出的内容，请检查输入/正则表达式")}function m(){window.$copy(e.value)}function v(){c.value="",e.value="",window.$alert("清空完毕")}return(k,s)=>(b(),f("div",null,[w,a("div",{class:"line-block"},[a("button",{onClick:h},"运行"),a("button",{onClick:m},"复制"),a("button",{onClick:v},"清空")]),a("div",V,[a("div",$,[R,l(a("input",{class:"flex1","onUpdate:modelValue":s[0]||(s[0]=n=>p.value=n),placeholder:"例：[^\\d*](\\d+(\\.\\d+)?)[^\\d*]"},null,512),[[o,p.value]]),l(a("input",{"onUpdate:modelValue":s[1]||(s[1]=n=>i.value=n),placeholder:"修饰符，例：igm"},null,512),[[o,i.value]])])]),a("div",N,[a("div",U,[X,l(a("input",{class:"flex1","onUpdate:modelValue":s[2]||(s[2]=n=>r.value=n),placeholder:"例：$1"},null,512),[[o,r.value]])]),a("div",M,[l(a("input",{type:"checkbox","onUpdate:modelValue":s[3]||(s[3]=n=>d.value=n),id:"clearNotMatch"},null,512),[[x,d.value]]),y])]),a("div",C,[l(a("textarea",{"onUpdate:modelValue":s[4]||(s[4]=n=>c.value=n),class:"text line-huge",placeholder:"输入"},null,512),[[o,c.value]]),l(a("textarea",{"onUpdate:modelValue":s[5]||(s[5]=n=>e.value=n),class:"text line-huge",placeholder:"输出",readonly:""},null,512),[[o,e.value]])]),B]))}},j=g(E,[["__file","RegexRunner.html.vue"]]);export{j as default};
